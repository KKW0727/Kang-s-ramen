<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.kangsRamen.model.dao.ReservationDao">
	<insert id="InsertReservationMst"
		parameterType="com.spring.kangsRamen.model.json.ReservationVo">
		insert into
			reservation_mst
		values(
			#{id},
			#{reservation_code},
			#{date},
			#{time},
			#{adult},
			#{child},
			#{seat}
		)
	</insert>

	<insert id="InsertReservationDtl"
		parameterType="com.spring.kangsRamen.model.json.ReservationVo">
		insert into
			reservation_dtl
		values(
			#{reservation_code},
			#{karaiRamen},
			#{shoyu},
			#{miso},
			#{tonkotsu},
			#{discount},
			#{price},
			now(),
			now()
		)
	</insert>
	
	<select id ="getMaxReservationCode" resultType="String">
		select
  			max(reservation_code)
		from
 			reservation_mst
    </select>
    
    <select id ="getCanceledAllReservationCode" resultType="Integer">
		select
  			reservation_code
		from
 			reservation_mst_backup
    </select>
    
     <select id="getAllReservation" resultType="com.spring.kangsRamen.model.json.ReservationVo">
        select
   			rm.id,rm.reservation_code,rm.date,rm.time,rm.adult,rm.child,rm.seat,
   			rd.karaiRamen,rd.shoyu,rd.miso,rd.tonkotsu,rd.discount,rd.price,rd.create_date,rd.update_date,p.payment_key
		from
   			reservation_mst rm
     		left outer join reservation_dtl rd on(rm.reservation_code = rd.reservation_code)
     		left outer join payment p on(rm.reservation_code = p.reservation_code)     				 
    	where
			rm.id = #{id};
   	</select>  
   	
   	<select id="getOneReservation" resultType="com.spring.kangsRamen.model.json.ReservationVo">
		select 
			rm.id, rm.reservation_code,rm.date,rm.time,rm.adult,rm.child,rm.seat,
   			rd.karaiRamen,rd.shoyu,rd.miso,rd.tonkotsu,rd.discount,rd.price,rd.create_date,rd.update_date
		from 
			reservation_mst rm 
			left outer join reservation_dtl rd on(rm.reservation_code = rd.reservation_code) 
		where 
			rd.reservation_code = #{reservation_code};
	</select>
    
    <update id="updateReservationMst" parameterType="com.spring.kangsRamen.model.json.ReservationVo">
       update
			reservation_mst
		set
			date = #{date},
			time = #{time},
			adult = #{adult},
			child = #{child},
			seat = #{seat},
			update_date = now()
		where
			reservation_code = #{reservation_code};
     </update>
     
      <update id="updateReservationDtl" parameterType="com.spring.kangsRamen.model.json.ReservationVo">
       update
			reservation_dtl
		set
			karaiRamen = #{karaiRamen},
    		shoyu = #{shoyu},
    		miso = #{miso},
    		tonkotsu = #{tonkotsu},
    		price = #{price}
    	where
			reservation_code = #{reservation_code};	
     </update>
     
     <delete id="deleteReservationDtl">
   	 	delete	
 		from
   			reservation_dtl
  		where
    		reservation_code = #{reservation_code};
	</delete>
     
  	<delete id="deleteReservationMst">
   	 	delete	
 		from
   			reservation_mst
  		where
    		reservation_code = #{reservation_code};  
	</delete>

	<insert id ="insertPayment" parameterType="com.spring.kangsRamen.model.json.PaymentVo">
		insert into
			payment
		values(
			#{id},
			#{reservation_code},
			#{payment_key},
			now()
		);
	</insert>
	
	<delete id ="deletePayment">
		delete
		from
			payment
		where
			reservation_code = #{reservation_code};
	</delete>
	
	<select id ="getAllCanceledReservation" resultType="com.spring.kangsRamen.model.json.ReservationVo">
		 select
   			rmb.id,rmb.reservation_code,rmb.date,rmb.time,rmb.adult,rmb.child,rmb.seat,
   			rdb.karaiRamen,rdb.shoyu,rdb.miso,rdb.tonkotsu,rdb.discount,rdb.price,pb.payment_key
		from
   			reservation_mst_backup rmb
     		left outer join reservation_dtl_backup rdb on(rmb.reservation_code = rdb.reservation_code)
     		left outer join payment_backup pb on(rmb.reservation_code = pb.reservation_code)     				 
    	where
			rmb.id = #{id};
	</select>
	
</mapper>